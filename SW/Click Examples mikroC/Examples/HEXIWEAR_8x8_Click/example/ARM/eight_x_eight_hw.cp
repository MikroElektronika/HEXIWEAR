#line 1 "D:/Marko/tasks/freescale/svn/Hexiwear/MK64/5. Click Demos/1. mikroC/2. Primeri/HEXIWEAR_8x8_Click/example/ARM/eight_x_eight_hw.c"
#line 1 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
#line 1 "d:/work/mikroc pro for arm/include/stdint.h"





typedef signed char int8_t;
typedef signed int int16_t;
typedef signed long int int32_t;
typedef signed long long int64_t;


typedef unsigned char uint8_t;
typedef unsigned int uint16_t;
typedef unsigned long int uint32_t;
typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef signed int int_least16_t;
typedef signed long int int_least32_t;
typedef signed long long int_least64_t;


typedef unsigned char uint_least8_t;
typedef unsigned int uint_least16_t;
typedef unsigned long int uint_least32_t;
typedef unsigned long long uint_least64_t;



typedef signed long int int_fast8_t;
typedef signed long int int_fast16_t;
typedef signed long int int_fast32_t;
typedef signed long long int_fast64_t;


typedef unsigned long int uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long long uint_fast64_t;


typedef signed long int intptr_t;
typedef unsigned long int uintptr_t;


typedef signed long long intmax_t;
typedef unsigned long long uintmax_t;
#line 124 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_init( void );
#line 136 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_display_one_col( uint8_t row, uint8_t col );
#line 161 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_display_image( uint8_t* image );
#line 186 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_display_const_image( const uint8_t* image );
#line 201 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_display_string( const uint8_t* images );
#line 210 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_display_shift_left( void );
#line 238 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_set_intensity( uint8_t intensity );
#line 258 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_set_scan_limit( uint8_t scan_limit );
#line 270 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_shut_down( void );

void led_eight_display_test( void );
#line 290 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hw.h"
void led_eight_scroll_text( uint8_t* str, uint8_t delay );
#line 1 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hal.h"
#line 1 "d:/work/mikroc pro for arm/include/stdint.h"
#line 1 "d:/work/mikroc pro for arm/include/stdbool.h"



 typedef char _Bool;
#line 1 "d:/work/mikroc pro for arm/include/stddef.h"



typedef long ptrdiff_t;


 typedef unsigned long size_t;

typedef unsigned long wchar_t;
#line 64 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hal.h"
void led_eight_hal_cs_high( void );
#line 72 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hal.h"
void led_eight_hal_cs_low( void );
#line 79 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hal.h"
void led_eight_hal_init( void );
#line 93 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_hal.h"
void led_eight_hal_write( uint8_t *buffer );
#line 1 "d:/marko/tasks/freescale/svn/hexiwear/mk64/5. click demos/1. mikroc/2. primeri/hexiwear_8x8_click/example/arm/eight_x_eight_font.h"



const unsigned char font[2048] =
{
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x7E, 0x81, 0xA9, 0x8D, 0x8D, 0xA9, 0x81, 0x7E,
 0x7E, 0xFF, 0xD7, 0xF3, 0xF3, 0xD7, 0xFF, 0x7E,
 0x00, 0x70, 0xF8, 0xFC, 0x7E, 0xFC, 0xF8, 0x70,
 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10,
 0x00, 0x18, 0x5D, 0xFF, 0xFF, 0xFF, 0x5D, 0x18,
 0x00, 0x08, 0x1D, 0x3F, 0xFF, 0x3F, 0x1D, 0x08,
 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,
 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,
 0xF0, 0xE0, 0xFE, 0xBF, 0x11, 0x11, 0x1F, 0x0E,
 0x00, 0x72, 0xFA, 0x8F, 0x8F, 0xFA, 0x72, 0x00,
 0xE0, 0xE0, 0xA0, 0xA0, 0xFE, 0xFF, 0x07, 0x03,
 0xFC, 0xFE, 0xA6, 0xA0, 0xA0, 0xFE, 0xFF, 0x03,
 0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
 0x00, 0x10, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE,
 0x00, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x10,
 0x00, 0x24, 0x66, 0xFF, 0xFF, 0x66, 0x24, 0x00,
 0x00, 0xFA, 0xFA, 0x00, 0x00, 0xFA, 0xFA, 0x00,
 0xFE, 0xFE, 0x80, 0xFE, 0xFE, 0x90, 0xF0, 0x60,
 0x00, 0x40, 0xDA, 0xBF, 0xA5, 0xFD, 0x5B, 0x02,
 0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x00,
 0x01, 0x29, 0x6D, 0xFF, 0xFF, 0x6D, 0x29, 0x01,
 0x00, 0x20, 0x60, 0xFE, 0xFE, 0x60, 0x20, 0x00,
 0x00, 0x08, 0x0C, 0xFE, 0xFE, 0x0C, 0x08, 0x00,
 0x00, 0x10, 0x38, 0x7C, 0x54, 0x10, 0x10, 0x10,
 0x00, 0x10, 0x10, 0x10, 0x54, 0x7C, 0x38, 0x10,
 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x3C,
 0x10, 0x38, 0x7C, 0x10, 0x10, 0x7C, 0x38, 0x10,
 0x0C, 0x1C, 0x3C, 0x7C, 0x7C, 0x3C, 0x1C, 0x0C,
 0x60, 0x70, 0x78, 0x7C, 0x7C, 0x78, 0x70, 0x60,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x60, 0xFA, 0xFA, 0x60, 0x00,
 0x00, 0x00, 0xE0, 0xE0, 0x00, 0xE0, 0xE0, 0x00,
 0x00, 0x28, 0xFE, 0xFE, 0x28, 0xFE, 0xFE, 0x28,
 0x00, 0x00, 0x48, 0x5C, 0xD6, 0xD6, 0x74, 0x24,
 0x00, 0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62,
 0x00, 0x12, 0x5E, 0xEC, 0xBA, 0xF2, 0x5E, 0x0C,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x20,
 0x00, 0x00, 0x00, 0x82, 0xC6, 0x7C, 0x38, 0x00,
 0x00, 0x00, 0x00, 0x38, 0x7C, 0xC6, 0x82, 0x00,
 0x10, 0x54, 0x7C, 0x38, 0x38, 0x7C, 0x54, 0x10,
 0x00, 0x00, 0x10, 0x10, 0x7C, 0x7C, 0x10, 0x10,
 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x01, 0x00,
 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
 0x00, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06,
 0x00, 0x7C, 0xFE, 0xB2, 0x9A, 0x8E, 0xFE, 0x7C,
 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x40, 0x00,
 0x00, 0x00, 0x62, 0xF2, 0x92, 0x9A, 0xCE, 0x46,
 0x00, 0x00, 0x6C, 0xFE, 0x92, 0x92, 0xC6, 0x44,
 0x00, 0x08, 0xFE, 0xFE, 0xC8, 0x68, 0x38, 0x18,
 0x00, 0x00, 0x9C, 0xBE, 0xA2, 0xA2, 0xE6, 0xE4,
 0x00, 0x00, 0x0C, 0x9E, 0x92, 0xD2, 0x7E, 0x3C,
 0x00, 0x00, 0xE0, 0xF0, 0x9E, 0x8E, 0x80, 0x80,
 0x00, 0x00, 0x6C, 0xFE, 0x92, 0x92, 0xFE, 0x6C,
 0x00, 0x00, 0x78, 0xFC, 0x96, 0x92, 0xF2, 0x60,
 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x66, 0x67, 0x01, 0x00,
 0x00, 0x00, 0x00, 0x82, 0xC6, 0x6C, 0x38, 0x10,
 0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0x82, 0x00,
 0x00, 0x00, 0x60, 0xF0, 0x9A, 0x8A, 0xC0, 0x40,
 0x00, 0x78, 0xF8, 0xBA, 0xBA, 0x82, 0xFE, 0x7C,
 0x00, 0x3E, 0x7E, 0xC8, 0xC8, 0x7E, 0x3E, 0x00,
 0x00, 0x6C, 0xFE, 0x92, 0x92, 0xFE, 0xFE, 0x00,
 0x00, 0x44, 0xC6, 0x82, 0x82, 0xC6, 0x7C, 0x38,
 0x00, 0x38, 0x7C, 0xC6, 0x82, 0xFE, 0xFE, 0x00,
 0x00, 0x82, 0x82, 0x92, 0x92, 0xFE, 0xFE, 0x00,
 0x00, 0x80, 0x80, 0x90, 0x90, 0xFE, 0xFE, 0x00,
 0x00, 0x4E, 0xCE, 0x8A, 0x82, 0xC6, 0x7C, 0x38,
 0x00, 0xFE, 0xFE, 0x10, 0x10, 0xFE, 0xFE, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00,
 0x00, 0xFC, 0xFE, 0x02, 0x02, 0x0E, 0x0C, 0x00,
 0x00, 0xC6, 0xEE, 0x38, 0x10, 0xFE, 0xFE, 0x00,
 0x00, 0x02, 0x02, 0x02, 0x02, 0xFE, 0xFE, 0x00,
 0x00, 0xFE, 0xFE, 0x70, 0x38, 0x70, 0xFE, 0xFE,
 0x00, 0xFE, 0xFE, 0x18, 0x30, 0x60, 0xFE, 0xFE,
 0x00, 0x7C, 0xFE, 0x82, 0x82, 0xFE, 0x7C, 0x00,
 0x00, 0x60, 0xF0, 0x90, 0x90, 0xFE, 0xFE, 0x00,
 0x00, 0x7A, 0xFE, 0x8E, 0x84, 0xFC, 0x78, 0x00,
 0x00, 0x66, 0xFE, 0x98, 0x90, 0xFE, 0xFE, 0x00,
 0x00, 0x4C, 0xCE, 0x9A, 0xB2, 0xF6, 0x64, 0x00,
 0x00, 0x80, 0x80, 0xFE, 0xFE, 0x80, 0x80, 0x00,
 0x00, 0xFE, 0xFE, 0x02, 0x02, 0xFE, 0xFC, 0x00,
 0x00, 0xF8, 0xFC, 0x06, 0x06, 0xFC, 0xF8, 0x00,
 0x00, 0xFE, 0xFE, 0x0C, 0x18, 0x0C, 0xFE, 0xFE,
 0x00, 0xC6, 0xEE, 0x38, 0x38, 0xEE, 0xC6, 0x00,
 0x00, 0xE0, 0xF0, 0x1E, 0x1E, 0xF0, 0xE0, 0x00,
 0x00, 0xC2, 0xE2, 0xB2, 0x9A, 0x8E, 0x86, 0x82,
 0x00, 0x00, 0x00, 0x82, 0x82, 0xFE, 0xFE, 0x00,
 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80,
 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x82, 0x82, 0x00,
 0x00, 0x10, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x10,
 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
 0x00, 0x00, 0x00, 0x20, 0xE0, 0xC0, 0x00, 0x00,
 0x00, 0x1E, 0x3C, 0x2A, 0x2A, 0x2E, 0x04, 0x00,
 0x00, 0x0C, 0x1E, 0x12, 0x12, 0xFC, 0xFE, 0x00,
 0x00, 0x14, 0x36, 0x22, 0x22, 0x3E, 0x1C, 0x00,
 0x00, 0xFE, 0xFC, 0x12, 0x12, 0x1E, 0x0C, 0x00,
 0x00, 0x18, 0x3A, 0x2A, 0x2A, 0x3E, 0x1C, 0x00,
 0x00, 0x40, 0xC0, 0x90, 0xFE, 0x7E, 0x10, 0x00,
 0x00, 0x3E, 0x1F, 0x25, 0x25, 0x3D, 0x18, 0x00,
 0x00, 0x1E, 0x3E, 0x20, 0x10, 0xFE, 0xFE, 0x00,
 0x00, 0x00, 0x00, 0xBE, 0xBE, 0x00, 0x00, 0x00,
 0x00, 0x00, 0xBE, 0xBF, 0x01, 0x01, 0x07, 0x06,
 0x00, 0x22, 0x36, 0x1C, 0x08, 0xFE, 0xFE, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00,
 0x1E, 0x3E, 0x30, 0x1C, 0x3C, 0x30, 0x3E, 0x3E,
 0x00, 0x1E, 0x3E, 0x20, 0x20, 0x3E, 0x3E, 0x00,
 0x00, 0x1C, 0x3E, 0x22, 0x22, 0x3E, 0x1C, 0x00,
 0x00, 0x18, 0x3C, 0x24, 0x24, 0x1F, 0x3F, 0x00,
 0x00, 0x3F, 0x1F, 0x24, 0x24, 0x3C, 0x18, 0x00,
 0x00, 0x10, 0x30, 0x20, 0x30, 0x1E, 0x3E, 0x00,
 0x00, 0x24, 0x2E, 0x2A, 0x2A, 0x3A, 0x12, 0x00,
 0x00, 0x00, 0x24, 0x22, 0xFE, 0xFC, 0x20, 0x00,
 0x00, 0x3E, 0x3C, 0x02, 0x02, 0x3E, 0x3C, 0x00,
 0x00, 0x38, 0x3C, 0x06, 0x06, 0x3C, 0x38, 0x00,
 0x00, 0x3C, 0x3E, 0x0E, 0x1C, 0x0E, 0x3E, 0x3C,
 0x00, 0x22, 0x36, 0x1C, 0x08, 0x1C, 0x36, 0x22,
 0x00, 0x3E, 0x3F, 0x05, 0x05, 0x3D, 0x38, 0x00,
 0x00, 0x22, 0x32, 0x3A, 0x2E, 0x26, 0x22, 0x00,
 0x00, 0x00, 0x82, 0x82, 0xEE, 0x7C, 0x10, 0x10,
 0x00, 0x00, 0x00, 0xEE, 0xEE, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x10, 0x10, 0x7C, 0xEE, 0x82, 0x82,
 0x00, 0x80, 0xC0, 0x40, 0xC0, 0x80, 0xC0, 0x40,
 0x00, 0x0E, 0x1E, 0x32, 0x62, 0x32, 0x1E, 0x0E,
 0x00, 0xFE, 0xFE, 0xC8, 0x68, 0x3E, 0x1E, 0x00,
 0x00, 0x0C, 0x9E, 0x92, 0x92, 0xFE, 0xFE, 0x00,
 0x00, 0x6C, 0xFE, 0x92, 0x92, 0xFE, 0xFE, 0x00,
 0x00, 0x80, 0x80, 0x80, 0x80, 0xFE, 0xFE, 0x00,
 0x00, 0x03, 0xFF, 0xFE, 0xC2, 0x7E, 0x3F, 0x03,
 0x00, 0x82, 0x92, 0x92, 0x92, 0xFE, 0xFE, 0x00,
 0xC6, 0xEE, 0x38, 0xFE, 0xFE, 0x38, 0xEE, 0xC6,
 0x00, 0x6C, 0xFE, 0x92, 0x92, 0xC6, 0x44, 0x00,
 0x00, 0xFE, 0xFE, 0x30, 0x18, 0xFE, 0xFE, 0x00,
 0x00, 0x7E, 0xFE, 0xB0, 0x98, 0xFE, 0x7E, 0x00,
 0x00, 0x82, 0xC6, 0x6C, 0x38, 0xFE, 0xFE, 0x00,
 0x00, 0xFE, 0xFE, 0xC0, 0x60, 0x3E, 0x1E, 0x00,
 0x00, 0xFE, 0xFE, 0x70, 0x3C, 0x70, 0xFE, 0xFE,
 0x00, 0xFE, 0xFE, 0x10, 0x10, 0xFE, 0xFE, 0x00,
 0x00, 0x7C, 0xFE, 0x82, 0x82, 0xFE, 0x7C, 0x00,
 0x00, 0xFE, 0xFE, 0x80, 0x80, 0xFE, 0xFE, 0x00,
 0x00, 0x70, 0xF8, 0x88, 0x88, 0xFE, 0xFE, 0x00,
 0x00, 0x44, 0xC6, 0x82, 0x82, 0xFE, 0x7C, 0x00,
 0x00, 0x80, 0x80, 0xFE, 0xFE, 0x80, 0x80, 0x00,
 0x00, 0xFC, 0xFE, 0x12, 0x12, 0xF6, 0xE4, 0x00,
 0x70, 0xF8, 0x88, 0xFE, 0xFE, 0x88, 0xF8, 0x70,
 0x00, 0xC6, 0xEE, 0x38, 0x38, 0xEE, 0xC6, 0x00,
 0x03, 0xFF, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0x00,
 0x00, 0xFE, 0xFE, 0x10, 0x10, 0xF0, 0xE0, 0x00,
 0xFE, 0xFE, 0x02, 0xFE, 0xFE, 0x02, 0xFE, 0xFE,
 0xFF, 0xFF, 0x02, 0xFE, 0xFE, 0x02, 0xFE, 0xFE,
 0x00, 0x0C, 0x1E, 0x12, 0x12, 0xFE, 0xFE, 0x80,
 0x00, 0xFE, 0xFE, 0x0C, 0x1E, 0x12, 0xFE, 0xFE,
 0x00, 0x0C, 0x1E, 0x12, 0x12, 0xFE, 0xFE, 0x00,
 0x00, 0x38, 0x7C, 0xD6, 0x92, 0x92, 0x82, 0x44,
 0x7C, 0xFE, 0x82, 0xFE, 0x7C, 0x10, 0xFE, 0xFE,
 0x00, 0xFE, 0xFE, 0x88, 0x8C, 0xFE, 0x72, 0x00,
 0x00, 0x1E, 0x3C, 0x2A, 0x2A, 0x2E, 0x04, 0x00,
 0x00, 0x0C, 0x5E, 0x52, 0x52, 0x7E, 0x2C, 0x00,
 0x00, 0x14, 0x3E, 0x2A, 0x2A, 0x3E, 0x3E, 0x00,
 0x00, 0x20, 0x20, 0x20, 0x20, 0x3E, 0x3E, 0x00,
 0x00, 0x03, 0x3E, 0x3E, 0x32, 0x1E, 0x0E, 0x03,
 0x00, 0x18, 0x3A, 0x2A, 0x2A, 0x3E, 0x1C, 0x00,
 0x22, 0x36, 0x1C, 0x3E, 0x3E, 0x1C, 0x36, 0x22,
 0x00, 0x14, 0x3E, 0x2A, 0x22, 0x36, 0x14, 0x00,
 0x00, 0x3E, 0x3E, 0x18, 0x0C, 0x3E, 0x3E, 0x00,
 0x00, 0x3E, 0x3E, 0x58, 0x4C, 0x3E, 0x3E, 0x00,
 0x00, 0x22, 0x36, 0x1C, 0x08, 0x3E, 0x3E, 0x00,
 0x00, 0x3E, 0x3E, 0x30, 0x18, 0x0E, 0x06, 0x00,
 0x00, 0x3E, 0x3E, 0x18, 0x1E, 0x18, 0x3E, 0x3E,
 0x00, 0x3E, 0x3E, 0x08, 0x08, 0x3E, 0x3E, 0x00,
 0x00, 0x1C, 0x3E, 0x22, 0x22, 0x3E, 0x1C, 0x00,
 0x00, 0x3E, 0x3E, 0x20, 0x20, 0x3E, 0x3E, 0x00,
 0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00,
 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
 0xFF, 0x55, 0xFF, 0xAA, 0xFF, 0x55, 0xFF, 0xAA,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x10, 0x10, 0x10,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x50, 0x50, 0x50,
 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x10, 0x10,
 0x00, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10, 0x10,
 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x50, 0x50, 0x50,
 0x00, 0xFF, 0xFF, 0x00, 0xDF, 0xDF, 0x50, 0x50,
 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00,
 0x00, 0x7F, 0x7F, 0x40, 0x5F, 0x5F, 0x50, 0x50,
 0x00, 0xF0, 0xF0, 0x10, 0xD0, 0xD0, 0x50, 0x50,
 0x00, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10, 0x10,
 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x50, 0x50, 0x50,
 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x10, 0x10, 0x10,
 0x10, 0x10, 0x10, 0xF0, 0xF0, 0x00, 0x00, 0x00,
 0x10, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0x10,
 0x10, 0x10, 0x10, 0x1F, 0x1F, 0x10, 0x10, 0x10,
 0x10, 0x10, 0x10, 0xFF, 0xFF, 0x00, 0x00, 0x00,
 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
 0x10, 0x10, 0x10, 0xFF, 0xFF, 0x10, 0x10, 0x10,
 0x50, 0x50, 0x50, 0xFF, 0xFF, 0x00, 0x00, 0x00,
 0x10, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00,
 0x50, 0xD0, 0xD0, 0x10, 0xF0, 0xF0, 0x00, 0x00,
 0x50, 0x5F, 0x5F, 0x40, 0x7F, 0x7F, 0x00, 0x00,
 0x50, 0xD0, 0xD0, 0x10, 0xD0, 0xD0, 0x50, 0x50,
 0x50, 0x5F, 0x5F, 0x40, 0x5F, 0x5F, 0x50, 0x50,
 0x50, 0xDF, 0xDF, 0x00, 0xFF, 0xFF, 0x00, 0x00,
 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
 0x50, 0xDF, 0xDF, 0x00, 0xDF, 0xDF, 0x50, 0x50,
 0x50, 0x50, 0x50, 0xD0, 0xD0, 0x50, 0x50, 0x50,
 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10, 0x10,
 0x50, 0x50, 0x50, 0x5F, 0x5F, 0x50, 0x50, 0x50,
 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10, 0x10,
 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x00, 0x00,
 0x50, 0x50, 0x50, 0xF0, 0xF0, 0x00, 0x00, 0x00,
 0x50, 0x50, 0x50, 0x7F, 0x7F, 0x00, 0x00, 0x00,
 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x00, 0x00,
 0x10, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0x10, 0x10,
 0x50, 0x50, 0x50, 0xFF, 0xFF, 0x50, 0x50, 0x50,
 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0x10,
 0x10, 0x10, 0x10, 0x1F, 0x1F, 0x00, 0x00, 0x00,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
 0x00, 0x18, 0x3C, 0x24, 0x24, 0x3E, 0x3E, 0x00,
 0x00, 0x14, 0x36, 0x22, 0x22, 0x3E, 0x1C, 0x00,
 0x00, 0x20, 0x20, 0x3E, 0x3E, 0x20, 0x20, 0x00,
 0x00, 0x3C, 0x3E, 0x0A, 0x0A, 0x3A, 0x32, 0x00,
 0x18, 0x3C, 0x24, 0x3E, 0x3E, 0x24, 0x3C, 0x18,
 0x00, 0x22, 0x36, 0x1C, 0x1C, 0x36, 0x22, 0x00,
 0x03, 0x3F, 0x3E, 0x02, 0x02, 0x3E, 0x3E, 0x00,
 0x00, 0x3E, 0x3E, 0x08, 0x08, 0x38, 0x30, 0x00,
 0x3E, 0x3E, 0x02, 0x3E, 0x3E, 0x02, 0x3E, 0x3E,
 0x3F, 0x3F, 0x02, 0x3E, 0x3E, 0x02, 0x3E, 0x3E,
 0x00, 0x04, 0x0E, 0x0A, 0x0A, 0x3E, 0x3E, 0x20,
 0x00, 0x3E, 0x3E, 0x04, 0x0E, 0x0A, 0x3E, 0x3E,
 0x00, 0x04, 0x0E, 0x0A, 0x0A, 0x3E, 0x3E, 0x00,
 0x00, 0x1C, 0x3E, 0x2A, 0x2A, 0x2A, 0x22, 0x00,
 0x1C, 0x3E, 0x22, 0x3E, 0x1C, 0x08, 0x3E, 0x3E,
 0x00, 0x3E, 0x3E, 0x28, 0x2C, 0x3E, 0x12, 0x00,
 0x00, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
 0x00, 0x00, 0x22, 0x22, 0xFA, 0x22, 0x22, 0x00,
 0x00, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00,
 0x00, 0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00,
 0x60, 0xE0, 0x80, 0xFF, 0x7F, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x01, 0x07, 0x06,
 0x00, 0x08, 0x08, 0x6B, 0x6B, 0x08, 0x08, 0x00,
 0x00, 0x48, 0x6C, 0x24, 0x6C, 0x48, 0x6C, 0x24,
 0x00, 0x00, 0x30, 0x78, 0x48, 0x78, 0x30, 0x00,
 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00,
 0x80, 0xE0, 0x38, 0x0E, 0x03, 0x06, 0x0C, 0x08,
 0x3C, 0x42, 0x81, 0xA5, 0xA5, 0x99, 0x42, 0x3C,
 0x00, 0x00, 0x00, 0x48, 0xA8, 0x98, 0x48, 0x00,
 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x00,
 0x00, 0x06, 0x02, 0x02, 0x02, 0x02, 0x06, 0x00
};
const unsigned char img1[256][8] = {
{0x1E, 0x3E, 0x30, 0x1C, 0x3C, 0x30, 0x3E, 0x3E},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0xBE, 0xBE, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x22, 0x36, 0x1C, 0x08, 0xFE, 0xFE, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x10, 0x30, 0x20, 0x30, 0x1E, 0x3E, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x1C, 0x3E, 0x22, 0x22, 0x3E, 0x1C, 0x00},
{0x1E, 0x3E, 0x30, 0x1C, 0x3C, 0x30, 0x3E, 0x3E},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0xBE, 0xBE, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x22, 0x36, 0x1C, 0x08, 0xFE, 0xFE, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x10, 0x30, 0x20, 0x30, 0x1E, 0x3E, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x1C, 0x3E, 0x22, 0x22, 0x3E, 0x1C, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x1E, 0x3E, 0x30, 0x1C, 0x3C, 0x30, 0x3E, 0x3E},
};
const unsigned char img2[256][8] = {
{0x78, 0xFC, 0xFE, 0x7F, 0x7F, 0xFE, 0xFC, 0x78},
{0x78, 0x7C, 0x7E, 0x7F, 0x7F, 0x7E, 0x7C, 0x78},
{0x38, 0x3C, 0x7E, 0x7F, 0x7F, 0x7E, 0x3C, 0x38},
{0x18, 0x3C, 0x7E, 0x5F, 0x5F, 0x7E, 0x3C, 0x18},
{0x08, 0x3C, 0x7E, 0x5F, 0x5F, 0x7E, 0x3C, 0x08},
{0x00, 0x34, 0x76, 0x57, 0x57, 0x76, 0x3C, 0x00},
{0x00, 0x34, 0x76, 0x53, 0x53, 0x76, 0x3C, 0x00},
{0x00, 0x34, 0x76, 0x53, 0x53, 0x76, 0x3C, 0x00},
{0x00, 0x34, 0x76, 0x52, 0x52, 0x76, 0x3C, 0x00},
{0x00, 0x34, 0x76, 0x52, 0x52, 0x76, 0x3C, 0x00},
{0x01, 0x35, 0x77, 0x53, 0x53, 0x77, 0x3D, 0x01},
{0x03, 0x37, 0x75, 0x51, 0x51, 0x75, 0x3F, 0x03},
{0x07, 0x33, 0x71, 0x55, 0x55, 0x71, 0x3B, 0x07},
{0x0F, 0x3B, 0x79, 0x5D, 0x5D, 0x79, 0x33, 0x0F},
{0x1F, 0x2B, 0x69, 0x4D, 0x4D, 0x69, 0x23, 0x1F},
{0x3F, 0x0B, 0x49, 0x6D, 0x6D, 0x49, 0x03, 0x3F},
{0x7F, 0x4B, 0x09, 0x2D, 0x2D, 0x09, 0x43, 0x7F},
{0xFF, 0xCB, 0x89, 0xAD, 0xAD, 0x89, 0xC3, 0xFF},
{0xFF, 0xCB, 0x89, 0xAD, 0xAD, 0x89, 0xC3, 0xFF},
{0xFF, 0xCB, 0x89, 0xAD, 0xAD, 0x89, 0xC3, 0xFF}
};
#line 1 "d:/work/mikroc pro for arm/include/stddef.h"
#line 96 "D:/Marko/tasks/freescale/svn/Hexiwear/MK64/5. Click Demos/1. mikroC/2. Primeri/HEXIWEAR_8x8_Click/example/ARM/eight_x_eight_hw.c"
static uint8_t frame_buffer[8];
#line 105 "D:/Marko/tasks/freescale/svn/Hexiwear/MK64/5. Click Demos/1. mikroC/2. Primeri/HEXIWEAR_8x8_Click/example/ARM/eight_x_eight_hw.c"
static refresh( void );
static scroll_refresh( void );
static uint8_t led_eight_reverse_byte( uint8_t b );
#line 111 "D:/Marko/tasks/freescale/svn/Hexiwear/MK64/5. Click Demos/1. mikroC/2. Primeri/HEXIWEAR_8x8_Click/example/ARM/eight_x_eight_hw.c"
static refresh()
{
 int i,j,k,m;
 uint8_t buffer[2];
 uint8_t result = 0;
 uint8_t *ptr = frame_buffer;

 for( i = 7, j = 0; i >= 0; i--, j++ )
 {
 for( k = 7, m = 7; k >= 0; k--, m--)
 {
 result |= ( ptr[7 - k] & ( 1 << j ) ) >> j << k;
 }

 buffer[0] = j + 1;
 buffer[1] = result;
 led_eight_hal_write( buffer );
 result = 0;
 }

 return;
}

static scroll_refresh()
{
 int i,j,k,m;
 uint8_t buffer[2];
 uint8_t result = 0;
 uint8_t *ptr = frame_buffer;

 for( i = 7, j = 0; i >= 0; i--, j++ )
 {
 for( k = 7, m = 7; k >= 0; k--, m--)
 {
 result |= ( ptr[7 - k] & ( 1 << j ) ) >> j << k;
 }

 result = led_eight_reverse_byte( result );

 buffer[0] = j + 1;
 buffer[1] = result;
 led_eight_hal_write( buffer );
 result = 0;
 }

 return;
}

static uint8_t led_eight_reverse_byte( uint8_t b )
{
 b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 return b;
}

void led_eight_init()
{
 uint8_t buffer[2];
 led_eight_hal_init();

 buffer[0] =  0x09 ;
 buffer[1] =  0x00 ;
 led_eight_hal_write( buffer );

 buffer[0] =  0x0B ;
 buffer[1] =  0x07 ;
 led_eight_hal_write( buffer );

 buffer[0] =  0x0A ;
 buffer[1] =  0x0F ;
 led_eight_hal_write( buffer );

 buffer[0] =  0x0F ;
 buffer[1] = 0x00;
 led_eight_hal_write( buffer );

 buffer[0] =  0x0C ;
 buffer[1] =  0x01 ;
 led_eight_hal_write( buffer );

 return;
}


void led_eight_display_one_col( uint8_t row, uint8_t col )
{
 uint8_t buffer[2];
 buffer[0] = 8 - row;
 buffer[1] = col;
 led_eight_hal_write( buffer );

 return;
}

void led_eight_display_image( uint8_t* image )
{
 int i;

 if( image ==  ((void *)0)  )
 return;

 for( i = 0; i <=7; i++ )
 {
 frame_buffer[i] = image[i];
 }
 refresh();

 return;
}

void led_eight_display_const_image( const uint8_t* image )
{
 int i;

 if( image ==  ((void *)0)  )
 return;

 for( i = 0; i <=7; i++ )
 {
 frame_buffer[i] = image[i];
 }
 refresh();

 return;
}

void led_eight_display_string( uint8_t* str, uint8_t delay )
{
 uint8_t *ptr = str;
 int i;

 if( ptr ==  ((void *)0)  )
 return;

 while( *ptr !=  ((void *)0)  )
 {
 for( i = 0; i < 8; i++ )
 frame_buffer[i] = font[( *ptr * 8 ) + i];

 refresh();
 vDelay_ms( delay );
 ptr++;
 }
}

void led_eight_scroll_text( uint8_t* str, uint8_t delay)
{
 uint8_t *ptr = str;
 uint8_t *p_font = 0;
 int i, j, k, m;

 memset( frame_buffer, 0, sizeof(frame_buffer) );

 if( ptr ==  ((void *)0)  )
 return;

 p_font = font[*ptr];

 while( *ptr !=  ((void *)0)  )
 {
 for( i = 0, m = 8; i < 8; i++, m-- )
 {
 for( j = 0, k = 8; j < 8; j++, k-- )
 {
 frame_buffer[j] <<= 1;
 frame_buffer[j] |= ( font[( *ptr * 8) + m ] & ( 1 << j) ) >> j;
 scroll_refresh();
 vDelay_ms( delay );
 }
 p_font++;
 }
 ptr++;
 }

}

void led_eight_display_shift_left()
{
 int i, j;
 uint8_t temp_buffer[8];

 for( i = 0; i < 8; i++ )
 {
 temp_buffer[i] = frame_buffer[i];
 }
 for( j = 7; j > 0; j-- )
 {
 frame_buffer[j] = temp_buffer[ j - 1 ];
 }
 refresh();

 return;

}

void led_eight_set_intensity( uint8_t intensity )
{
 uint8_t buffer[2];

 if( intensity > 15 || intensity < 0 )
 return;

 buffer[0] =  0x0A ;
 buffer[1] = intensity;
 led_eight_hal_write( buffer );

 return;
}

void led_eight_set_scan_limit( uint8_t scan_limit )
{
 uint8_t buffer[2];

 if( scan_limit > 7 || scan_limit < 0 )
 return;

 buffer[0] =  0x0B ;
 buffer[1] = scan_limit;
 led_eight_hal_write( buffer );

 return;
}

void led_eight_shut_down( void )
{
 uint8_t buffer[2];

 buffer[0] =  0x0C ;
 buffer[1] =  0x00 ;
 led_eight_hal_write( buffer );

 return;
}

void led_eight_display_test( void )
{
 uint8_t buffer[2];

 buffer[0] =  0x0F ;
 buffer[1] = 0x01;
 led_eight_hal_write( buffer );

 return;
}
