_OLED_PowerOn:
  begin   (midx: 0)
//OLED_driver.c,79 :: 		void OLED_PowerOn(void)
_OLED_PowerOn:
  begin   (midx: 0)
//OLED_driver.c,81 :: 		OLED_Pwr_bit = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(OLED_Pwr_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
  end
   (midx: 0)
_OLED_PowerOff:
  begin   (midx: 0)
//OLED_driver.c,88 :: 		void OLED_PowerOff(void)
_OLED_PowerOff:
  begin   (midx: 0)
//OLED_driver.c,90 :: 		OLED_Pwr_bit = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(OLED_Pwr_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
  end
   (midx: 0)
_OLED_SendCmd:
  begin   (midx: 0)
//OLED_driver.c,106 :: 		)
_OLED_SendCmd:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,108 :: 		if ( isFirst )
   (midx: 0)
	if (!R1) then goto 0   (midx: 0)
//OLED_driver.c,110 :: 		OLED_DC_bit = 0;
	R3 <1> <- 0   (midx: 0)
	R2 <4> <- addr(OLED_DC_bit)   (midx: 0)
	[R2] <0> <- R3   (midx: 0)
//OLED_driver.c,111 :: 		}
	goto	1   (midx: 0)
0:   (midx: 0)
//OLED_driver.c,114 :: 		OLED_DC_bit = 1;
	R3 <1> <- 1   (midx: 0)
	R2 <4> <- addr(OLED_DC_bit)   (midx: 0)
	[R2] <0> <- R3   (midx: 0)
//OLED_driver.c,115 :: 		}
1:   (midx: 0)
//OLED_driver.c,117 :: 		OLED_CS_bit = 0;
	R3 <1> <- 0   (midx: 0)
	R2 <4> <- addr(OLED_CS_bit)   (midx: 0)
	[R2] <0> <- R3   (midx: 0)
//OLED_driver.c,119 :: 		SPI2_Write((uint8_t)cmd);
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _SPI2_Write   (midx: 0)
//OLED_driver.c,121 :: 		OLED_CS_bit = 1;
	R3 <1> <- 1   (midx: 0)
	R2 <4> <- addr(OLED_CS_bit)   (midx: 0)
	[R2] <0> <- R3   (midx: 0)
//OLED_driver.c,123 :: 		return OLED_STATUS_SUCCESS;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_OLED_Init:
  begin   (midx: 0)
//OLED_driver.c,136 :: 		oled_status_t OLED_Init(void)
_OLED_Init:
  begin   (midx: 0)
//OLED_driver.c,138 :: 		oled_text_properties.alignParam = OLED_TEXT_ALIGN_CENTER;
	R1 <1> <- 3   (midx: 0)
	R0 <4> <- addr(OLED_driver_oled_text_properties+6)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//OLED_driver.c,139 :: 		oled_text_properties.background = NULL;
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(OLED_driver_oled_text_properties+8)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//OLED_driver.c,141 :: 		GPIO_Digital_Output(&PTC_PDOR, _GPIO_PINMASK_13);
	R1 <4> <- 8192   (midx: 0)
	R0 <4> <- #PTC_PDOR   (midx: 0)
	CALL _GPIO_Digital_Output   (midx: 0)
//OLED_driver.c,142 :: 		GPIO_Digital_Output(&PTD_PDOR, _GPIO_PINMASK_15);
	R1 <4> <- 32768   (midx: 0)
	R0 <4> <- #PTD_PDOR   (midx: 0)
	CALL _GPIO_Digital_Output   (midx: 0)
//OLED_driver.c,143 :: 		GPIO_Digital_Output(&PTE_PDOR, _GPIO_PINMASK_6);
	R1 <4> <- 64   (midx: 0)
	R0 <4> <- #PTE_PDOR   (midx: 0)
	CALL _GPIO_Digital_Output   (midx: 0)
//OLED_driver.c,144 :: 		GPIO_Digital_Output(&PTB_PDOR, _GPIO_PINMASK_20);
	R1 <4> <- 1048576   (midx: 0)
	R0 <4> <- #PTB_PDOR   (midx: 0)
	CALL _GPIO_Digital_Output   (midx: 0)
//OLED_driver.c,147 :: 		_SPI_CFG_CLK_IDLE_HIGH | _SPI_CFG_CLK_PHASE_CHG_LEADING | _SPI_CFG_MSB_FIRST, &_GPIO_Module_SPI2_PB21_23_22);
	R2 <4> <- #__GPIO_Module_SPI2_PB21_23_22   (midx: 0)
	R1 <4> <- 2248146951   (midx: 0)
//OLED_driver.c,146 :: 		SPI2_Init_Advanced(18000000, _SPI_CFG_MASTER | _SPI_CFG_SELECT_CTAR0 | _SPI_CFG_FRAME_SIZE_8BITS |
	R0 <4> <- 18000000   (midx: 0)
//OLED_driver.c,147 :: 		_SPI_CFG_CLK_IDLE_HIGH | _SPI_CFG_CLK_PHASE_CHG_LEADING | _SPI_CFG_MSB_FIRST, &_GPIO_Module_SPI2_PB21_23_22);
	CALL _SPI2_Init_Advanced   (midx: 0)
//OLED_driver.c,148 :: 		PORTB_PCR21bits.DSE = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(PORTB_PCR21bits+0)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//OLED_driver.c,149 :: 		PORTB_PCR22bits.DSE = 1;
	R0 <4> <- addr(PORTB_PCR22bits+0)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//OLED_driver.c,150 :: 		PORTB_PCR23bits.DSE = 1;
	R0 <4> <- addr(PORTB_PCR23bits+0)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//OLED_driver.c,155 :: 		OLED_PowerOff();
	CALL _OLED_PowerOff   (midx: 0)
//OLED_driver.c,156 :: 		Delay_1ms();
	CALL _Delay_1ms   (midx: 0)
//OLED_driver.c,157 :: 		OLED_RST_bit = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(OLED_RST_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//OLED_driver.c,158 :: 		Delay_1ms();
	CALL _Delay_1ms   (midx: 0)
//OLED_driver.c,159 :: 		OLED_RST_bit = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(OLED_RST_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//OLED_driver.c,160 :: 		Delay_1ms();
	CALL _Delay_1ms   (midx: 0)
//OLED_driver.c,161 :: 		OLED_PowerOn();
	CALL _OLED_PowerOn   (midx: 0)
//OLED_driver.c,163 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_CMD_LOCK, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 253   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 2   (midx: 0)
//OLED_driver.c,165 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,166 :: 		}
2:   (midx: 0)
//OLED_driver.c,167 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_UNLOCK, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 18   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 3   (midx: 0)
//OLED_driver.c,169 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,170 :: 		}
3:   (midx: 0)
//OLED_driver.c,172 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_CMD_LOCK, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 253   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 4   (midx: 0)
//OLED_driver.c,174 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,175 :: 		}
4:   (midx: 0)
//OLED_driver.c,176 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_ACC_TO_CMD_YES, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 177   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 5   (midx: 0)
//OLED_driver.c,178 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,179 :: 		}
5:   (midx: 0)
//OLED_driver.c,181 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_DISPLAYOFF, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 174   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 6   (midx: 0)
//OLED_driver.c,183 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,184 :: 		}
6:   (midx: 0)
//OLED_driver.c,186 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_OSC_FREQ_AND_CLOCKDIV, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 179   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 7   (midx: 0)
//OLED_driver.c,188 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,189 :: 		}
7:   (midx: 0)
//OLED_driver.c,190 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xF1, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 241   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 8   (midx: 0)
//OLED_driver.c,192 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,193 :: 		}
8:   (midx: 0)
//OLED_driver.c,195 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_MUX_RATIO, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 202   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 9   (midx: 0)
//OLED_driver.c,197 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,198 :: 		}
9:   (midx: 0)
//OLED_driver.c,199 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x5F, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 95   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 10   (midx: 0)
//OLED_driver.c,201 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,202 :: 		}
10:   (midx: 0)
//OLED_driver.c,204 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_REMAP, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 160   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 11   (midx: 0)
//OLED_driver.c,206 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,207 :: 		}
11:   (midx: 0)
//OLED_driver.c,208 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_REMAP_SETTINGS, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 96   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 12   (midx: 0)
//OLED_driver.c,210 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,211 :: 		}
12:   (midx: 0)
//OLED_driver.c,213 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_COLUMN, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 21   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 13   (midx: 0)
//OLED_driver.c,215 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,216 :: 		}
13:   (midx: 0)
//OLED_driver.c,217 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x00, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 0   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 14   (midx: 0)
//OLED_driver.c,219 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,220 :: 		}
14:   (midx: 0)
//OLED_driver.c,221 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x5F, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 95   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 15   (midx: 0)
//OLED_driver.c,223 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,224 :: 		}
15:   (midx: 0)
//OLED_driver.c,226 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_ROW, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 117   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 16   (midx: 0)
//OLED_driver.c,228 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,229 :: 		}
16:   (midx: 0)
//OLED_driver.c,230 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x00, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 0   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 17   (midx: 0)
//OLED_driver.c,232 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,233 :: 		}
17:   (midx: 0)
//OLED_driver.c,234 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x5F, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 95   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 18   (midx: 0)
//OLED_driver.c,236 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,237 :: 		}
18:   (midx: 0)
//OLED_driver.c,239 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_STARTLINE, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 161   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 19   (midx: 0)
//OLED_driver.c,241 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,242 :: 		}
19:   (midx: 0)
//OLED_driver.c,243 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x80, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 128   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 20   (midx: 0)
//OLED_driver.c,245 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,246 :: 		}
20:   (midx: 0)
//OLED_driver.c,248 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_DISPLAYOFFSET, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 162   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 21   (midx: 0)
//OLED_driver.c,250 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,251 :: 		}
21:   (midx: 0)
//OLED_driver.c,252 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x60, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 96   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 22   (midx: 0)
//OLED_driver.c,254 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,255 :: 		}
22:   (midx: 0)
//OLED_driver.c,257 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_PRECHARGE, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 177   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 23   (midx: 0)
//OLED_driver.c,259 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,260 :: 		}
23:   (midx: 0)
//OLED_driver.c,261 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x32, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 50   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 24   (midx: 0)
//OLED_driver.c,263 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,264 :: 		}
24:   (midx: 0)
//OLED_driver.c,266 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_VCOMH, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 190   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 25   (midx: 0)
//OLED_driver.c,268 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,269 :: 		}
25:   (midx: 0)
//OLED_driver.c,270 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x05, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 5   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 26   (midx: 0)
//OLED_driver.c,272 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,273 :: 		}
26:   (midx: 0)
//OLED_driver.c,275 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_NORMALDISPLAY, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 166   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 27   (midx: 0)
//OLED_driver.c,277 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,278 :: 		}
27:   (midx: 0)
//OLED_driver.c,280 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_CONTRASTABC, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 193   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 28   (midx: 0)
//OLED_driver.c,282 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,283 :: 		}
28:   (midx: 0)
//OLED_driver.c,284 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x8A, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 138   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 29   (midx: 0)
//OLED_driver.c,286 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,287 :: 		}
29:   (midx: 0)
//OLED_driver.c,288 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x51, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 81   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 30   (midx: 0)
//OLED_driver.c,290 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,291 :: 		}
30:   (midx: 0)
//OLED_driver.c,292 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x8A, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 138   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 31   (midx: 0)
//OLED_driver.c,294 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,295 :: 		}
31:   (midx: 0)
//OLED_driver.c,297 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_CONTRASTMASTER, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 199   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 32   (midx: 0)
//OLED_driver.c,299 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,300 :: 		}
32:   (midx: 0)
//OLED_driver.c,301 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xCF, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 207   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 33   (midx: 0)
//OLED_driver.c,303 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,304 :: 		}
33:   (midx: 0)
//OLED_driver.c,306 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SETVSL, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 180   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 34   (midx: 0)
//OLED_driver.c,308 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,309 :: 		}
34:   (midx: 0)
//OLED_driver.c,310 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xA0, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 160   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 35   (midx: 0)
//OLED_driver.c,312 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,313 :: 		}
35:   (midx: 0)
//OLED_driver.c,314 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xB5, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 181   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 36   (midx: 0)
//OLED_driver.c,316 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,317 :: 		}
36:   (midx: 0)
//OLED_driver.c,318 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x55, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 85   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 37   (midx: 0)
//OLED_driver.c,320 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,321 :: 		}
37:   (midx: 0)
//OLED_driver.c,323 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_PRECHARGE2, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 182   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 38   (midx: 0)
//OLED_driver.c,325 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,326 :: 		}
38:   (midx: 0)
//OLED_driver.c,327 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x01, OTHER_BYTE ) )
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- 1   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 39   (midx: 0)
//OLED_driver.c,329 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,330 :: 		}
39:   (midx: 0)
//OLED_driver.c,332 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_DISPLAYON, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 175   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	if ( R0 = 0) then goto 40   (midx: 0)
//OLED_driver.c,334 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,335 :: 		}
40:   (midx: 0)
//OLED_driver.c,337 :: 		return OLED_STATUS_SUCCESS;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_OLED_SendData:
  begin   (midx: 0)
//OLED_driver.c,351 :: 		)
_OLED_SendData:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R5 <4> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <4> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,356 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_WRITERAM, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 92   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 41   (midx: 0)
//OLED_driver.c,358 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,359 :: 		}
41:   (midx: 0)
//OLED_driver.c,362 :: 		OLED_DC_bit = 1;
   (midx: 0)
   (midx: 0)
	R3 <1> <- 1   (midx: 0)
	R2 <4> <- addr(OLED_DC_bit)   (midx: 0)
	[R2] <0> <- R3   (midx: 0)
//OLED_driver.c,363 :: 		OLED_CS_bit = 0;
	R3 <1> <- 0   (midx: 0)
	R2 <4> <- addr(OLED_CS_bit)   (midx: 0)
	[R2] <0> <- R3   (midx: 0)
//OLED_driver.c,365 :: 		bufPtr = dataToSend;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R5   (midx: 0)
	R5 <4> <- R0   (midx: 0)
	R0 <4> <- R6   (midx: 0)
//OLED_driver.c,367 :: 		while(dataSize--)
42:   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- R0   (midx: 0)
   (midx: 0)
	R2 <4> <-  R0 - 1   (midx: 2)
   (midx: 0)
   (midx: 0)
	R6 <4> <- R2   (midx: 0)
   (midx: 0)
	if (!R3) then goto 43   (midx: 0)
//OLED_driver.c,369 :: 		SPI2_Write(*(bufPtr++));
   (midx: 0)
	R2 <1> <- *R5   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R0 <2> <- R2   (midx: 0)
	CALL _SPI2_Write   (midx: 0)
	R5 <4> <-  R5 + 1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//OLED_driver.c,370 :: 		}
   (midx: 0)
   (midx: 0)
	R0 <4> <- R6   (midx: 0)
	R5 <4> <- R5   (midx: 0)
	goto	42   (midx: 0)
43:   (midx: 0)
//OLED_driver.c,372 :: 		OLED_CS_bit = 1;
	R3 <1> <- 1   (midx: 0)
	R2 <4> <- addr(OLED_CS_bit)   (midx: 0)
	[R2] <0> <- R3   (midx: 0)
//OLED_driver.c,373 :: 		return OLED_STATUS_SUCCESS;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_OLED_DrawBox:
  begin   (midx: 0)
//OLED_driver.c,395 :: 		)
_OLED_DrawBox:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R10 <2> <- R0   (midx: 0)
	R9 <2> <- R1   (midx: 0)
	R5 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R8 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- FARG_OLED_DrawBox_color   (midx: 0)
//OLED_driver.c,397 :: 		oled_status_t status = OLED_STATUS_SUCCESS;
   (midx: 0)
//OLED_driver.c,400 :: 		boxSize = width*height;
	R4 <2> <-  R5 * R8   (midx: 1)
   (midx: 0)
	R7 <4> <- R4   (midx: 0)
//OLED_driver.c,403 :: 		if (AreCoordsNotValid(xCrd, yCrd, width, height))
	R4 <2> <-  R10 + R5   (midx: 1)
	R4 <2> <-  R4 - 1   (midx: 1)
	if ( R4 > 96) then goto 45   (midx: 1)
	if ( R10 < 0) then goto 45   (midx: 1)
	R4 <2> <-  R9 + R8   (midx: 1)
	R4 <2> <-  R4 - 1   (midx: 1)
	if ( R4 > 96) then goto 45   (midx: 1)
	if ( R9 < 0) then goto 45   (midx: 1)
	R4 <1> <- 0   (midx: 0)
	goto	44   (midx: 0)
45:   (midx: 0)
	R4 <1> <- 1   (midx: 0)
44:   (midx: 0)
tmi: LogicalEnd   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 = 0) then goto 46   (midx: 0)
//OLED_driver.c,405 :: 		status = OLED_STATUS_INIT_ERROR;
   (midx: 0)
	R0 <1> <- 3   (midx: 0)
//OLED_driver.c,406 :: 		}
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	goto	47   (midx: 0)
46:   (midx: 0)
//OLED_driver.c,419 :: 		OLED_AdjustColumnOffset(xCrd);
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R10 <2> <-  R10 + 16   (midx: 1)
	R10 <2> <- R10   (midx: 0)
//OLED_driver.c,420 :: 		OLED_AdjustRowOffset(yCrd);
	R9 <2> <- R9   (midx: 0)
//OLED_driver.c,422 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_COLUMN, FIRST_BYTE ) )
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 21   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 48   (midx: 0)
//OLED_driver.c,424 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,425 :: 		}
48:   (midx: 0)
//OLED_driver.c,426 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( xCrd, OTHER_BYTE ) )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R10   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 49   (midx: 0)
//OLED_driver.c,428 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,429 :: 		}
49:   (midx: 0)
//OLED_driver.c,430 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( xCrd + (width-1), OTHER_BYTE ) )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <-  R5 - 1   (midx: 1)
   (midx: 0)
	R4 <2> <-  R10 + R4   (midx: 1)
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R4   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 50   (midx: 0)
//OLED_driver.c,432 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,433 :: 		}
50:   (midx: 0)
//OLED_driver.c,435 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_ROW, FIRST_BYTE ) )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 117   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 51   (midx: 0)
//OLED_driver.c,437 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,438 :: 		}
51:   (midx: 0)
//OLED_driver.c,439 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( yCrd, OTHER_BYTE ) )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R9   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 52   (midx: 0)
//OLED_driver.c,441 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,442 :: 		}
52:   (midx: 0)
//OLED_driver.c,443 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( yCrd + (height-1), OTHER_BYTE ) )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <-  R8 - 1   (midx: 1)
   (midx: 0)
	R4 <2> <-  R9 + R4   (midx: 1)
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R4   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 53   (midx: 0)
//OLED_driver.c,445 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,446 :: 		}
53:   (midx: 0)
//OLED_driver.c,448 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_WRITERAM, FIRST_BYTE ) )
   (midx: 0)
   (midx: 0)
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 92   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 54   (midx: 0)
//OLED_driver.c,450 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,451 :: 		}
54:   (midx: 0)
//OLED_driver.c,453 :: 		OLED_DC_bit = 1;
   (midx: 0)
   (midx: 0)
	R5 <1> <- 1   (midx: 0)
	R4 <4> <- addr(OLED_DC_bit)   (midx: 0)
	[R4] <0> <- R5   (midx: 0)
//OLED_driver.c,454 :: 		OLED_CS_bit = 0;
	R5 <1> <- 0   (midx: 0)
	R4 <4> <- addr(OLED_CS_bit)   (midx: 0)
	[R4] <0> <- R5   (midx: 0)
//OLED_driver.c,455 :: 		for(cnt = 0; cnt < boxSize; cnt++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R5 <4> <- R7   (midx: 0)
	R7 <2> <- R0   (midx: 0)
55:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R7 >= R5) then goto 56   (midx: 2)
//OLED_driver.c,457 :: 		SPI2_Write((uint8_t)(color >> 8));
   (midx: 0)
	R4 <2> <-  R6 shr 8   (midx: 1)
	R0 <2> <- R4   (midx: 0)
	CALL _SPI2_Write   (midx: 0)
//OLED_driver.c,458 :: 		SPI2_Write((uint8_t)color);
	R0 <2> <- R6   (midx: 0)
	CALL _SPI2_Write   (midx: 0)
//OLED_driver.c,455 :: 		for(cnt = 0; cnt < boxSize; cnt++)
	R7 <2> <-  R7 + 1   (midx: 1)
	R7 <2> <- R7   (midx: 0)
//OLED_driver.c,459 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R5 <4> <- R5   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	55   (midx: 0)
56:   (midx: 0)
//OLED_driver.c,460 :: 		OLED_CS_bit = 1;
	R5 <1> <- 1   (midx: 0)
	R4 <4> <- addr(OLED_CS_bit)   (midx: 0)
	[R4] <0> <- R5   (midx: 0)
//OLED_driver.c,462 :: 		status = OLED_STATUS_SUCCESS;
   (midx: 0)
   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	R0 <1> <- R0   (midx: 0)
//OLED_driver.c,463 :: 		}
47:   (midx: 0)
//OLED_driver.c,465 :: 		return status;
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_OLED_FillScreen:
  begin   (midx: 0)
//OLED_driver.c,477 :: 		oled_status_t OLED_FillScreen( uint16_t color )
_OLED_FillScreen:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
   (midx: 0)
//OLED_driver.c,479 :: 		return OLED_DrawBox(0, 0, 96, 96, color);;
	FARG_OLED_DrawBox_color <2> <- PUSH(R0)   (midx: 0)
	R3 <2> <- 96   (midx: 0)
	R2 <2> <- 96   (midx: 0)
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 0   (midx: 0)
   (midx: 0)
	CALL _OLED_DrawBox   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
OLED_driver_SetBorders:
  begin   (midx: 0)
//OLED_driver.c,539 :: 		)
OLED_driver_SetBorders:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R2 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <1> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,544 :: 		OLED_AdjustColumnOffset(xCrd);
   (midx: 0)
	R4 <2> <-  R0 + 16   (midx: 0)
   (midx: 0)
	R6 <1> <- R4   (midx: 0)
//OLED_driver.c,545 :: 		OLED_AdjustRowOffset(yCrd);
   (midx: 0)
	R4 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R5 <1> <- R4   (midx: 0)
	R8 <1> <- R2   (midx: 0)
	R7 <1> <- R3   (midx: 0)
	R6 <1> <- R6   (midx: 0)
	R5 <1> <- R5   (midx: 0)
//OLED_driver.c,547 :: 		while (1)
63:   (midx: 0)
//OLED_driver.c,549 :: 		oledStatus = OLED_STATUS_SUCCESS;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R9 <1> <- 0   (midx: 0)
//OLED_driver.c,551 :: 		oledStatus |= OLED_SendCmd( OLED_CMD_SET_COLUMN, FIRST_BYTE );
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 21   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	R9 <1> <-  R9 | R0   (midx: 0)
	R9 <1> <- R9   (midx: 0)
//OLED_driver.c,552 :: 		oledStatus |= OLED_SendCmd( xCrd, OTHER_BYTE );
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R6   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	R9 <1> <-  R9 | R0   (midx: 0)
	R9 <1> <- R9   (midx: 0)
//OLED_driver.c,553 :: 		oledStatus |= OLED_SendCmd( xCrd + (width-1), OTHER_BYTE );
	R4 <2> <-  R8 - 1   (midx: 0)
	R4 <2> <-  R6 + R4   (midx: 5)
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R4   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	R9 <1> <-  R9 | R0   (midx: 0)
	R9 <1> <- R9   (midx: 0)
//OLED_driver.c,554 :: 		oledStatus |= OLED_SendCmd( OLED_CMD_SET_ROW, FIRST_BYTE );
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- 117   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	R9 <1> <-  R9 | R0   (midx: 0)
	R9 <1> <- R9   (midx: 0)
//OLED_driver.c,555 :: 		oledStatus |= OLED_SendCmd( yCrd, OTHER_BYTE );
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R5   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	R9 <1> <-  R9 | R0   (midx: 0)
	R9 <1> <- R9   (midx: 0)
//OLED_driver.c,556 :: 		oledStatus |= OLED_SendCmd( yCrd + (height-1), OTHER_BYTE );
	R4 <2> <-  R7 - 1   (midx: 0)
	R4 <2> <-  R5 + R4   (midx: 5)
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R4   (midx: 0)
	CALL _OLED_SendCmd   (midx: 0)
	R4 <1> <-  R9 | R0   (midx: 0)
//OLED_driver.c,558 :: 		if ( OLED_STATUS_SUCCESS == oledStatus)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 != 0) then goto 65   (midx: 0)
//OLED_driver.c,560 :: 		break;
	goto	64   (midx: 0)
//OLED_driver.c,561 :: 		}
65:   (midx: 0)
//OLED_driver.c,562 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R8 <1> <- R8   (midx: 0)
	R7 <1> <- R7   (midx: 0)
	R6 <1> <- R6   (midx: 0)
	R5 <1> <- R5   (midx: 0)
	goto	63   (midx: 0)
64:   (midx: 0)
  end
   (midx: 0)
_OLED_DrawPixel:
  begin   (midx: 0)
//OLED_driver.c,498 :: 		)
_OLED_DrawPixel:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R10 <2> <- R0   (midx: 0)
	R11 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,501 :: 		if AreCoordsNotValid( xCrd, yCrd, 1, 1 )
	R3 <2> <-  R10 + 1   (midx: 5)
	R3 <2> <-  R3 - 1   (midx: 5)
	if ( R3 > 96) then goto 59   (midx: 5)
	if ( R10 < 0) then goto 59   (midx: 5)
	R3 <2> <-  R11 + 1   (midx: 5)
	R3 <2> <-  R3 - 1   (midx: 5)
	if ( R3 > 96) then goto 59   (midx: 5)
	if ( R11 < 0) then goto 59   (midx: 5)
	R3 <1> <- 0   (midx: 0)
	goto	58   (midx: 0)
59:   (midx: 0)
	R3 <1> <- 1   (midx: 0)
58:   (midx: 0)
tmi: LogicalEnd   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 = 0) then goto 60   (midx: 0)
//OLED_driver.c,503 :: 		return OLED_STATUS_INIT_ERROR;
	R0 <1> <- 3   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,504 :: 		}
60:   (midx: 0)
//OLED_driver.c,508 :: 		uint16_t dot = color;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	OLED_DrawPixel_dot_L1_4 <2> <- R2   (midx: 0)
//OLED_driver.c,511 :: 		SetBorders( xCrd, yCrd, OLED_SCREEN_WIDTH, OLED_SCREEN_HEIGHT);
	R3 <1> <- 96   (midx: 0)
	R2 <1> <- 96   (midx: 0)
   (midx: 0)
	R1 <1> <- R11   (midx: 0)
   (midx: 0)
	R0 <1> <- R10   (midx: 0)
	CALL OLED_driver_SetBorders   (midx: 0)
//OLED_driver.c,513 :: 		OLED_SwapMe(dot);
	R3 <2> <- OLED_DrawPixel_dot_L1_4   (midx: 0)
	R3 <2> <-  R3 & 65280   (midx: 1)
	R4 <2> <-  R3 shr 8   (midx: 1)
	R3 <2> <- OLED_DrawPixel_dot_L1_4   (midx: 0)
	R3 <2> <-  R3 & 255   (midx: 1)
	R3 <2> <-  R3 shl 8   (midx: 1)
	R3 <2> <-  R4 | R3   (midx: 1)
	OLED_DrawPixel_dot_L1_5 <2> <- R3   (midx: 0)
//OLED_driver.c,516 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendData( (uint8_t*)&dot, 2 ) )
	R3 <4> <- addr(OLED_DrawPixel_dot_L1)   (midx: 0)
	R1 <4> <- 2   (midx: 0)
	R0 <4> <- R3   (midx: 0)
	CALL _OLED_SendData   (midx: 0)
	if ( R0 = 0) then goto 62   (midx: 0)
//OLED_driver.c,518 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,519 :: 		}
62:   (midx: 0)
//OLED_driver.c,520 :: 		return OLED_STATUS_SUCCESS;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
OLED_driver_OLED_Swap:
  begin   (midx: 0)
//OLED_driver.c,575 :: 		)
OLED_driver_OLED_Swap:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R3 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <4> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,578 :: 		for (var = 0; var < imgSize; var++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R4 <4> <- R2   (midx: 0)
	R2 <4> <- R0   (midx: 0)
	R0 <2> <- R3   (midx: 0)
	R1 <4> <- R1   (midx: 0)
66:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R1 >= R0) then goto 67   (midx: 2)
//OLED_driver.c,580 :: 		*imgDst = *imgSrc << 8;
	R3 <1> <- *R4   (midx: 0)
	R3 <2> <-  R3 shl 8   (midx: 1)
	[R2] <2> <- R3   (midx: 0)
//OLED_driver.c,581 :: 		imgSrc++;
   (midx: 0)
	R3 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R3   (midx: 0)
//OLED_driver.c,582 :: 		*imgDst |= *imgSrc;
	R4 <1> <- *R3   (midx: 0)
	R3 <2> <- *R2   (midx: 0)
	R3 <2> <-  R3 | R4   (midx: 1)
	[R2] <2> <- R3   (midx: 0)
//OLED_driver.c,583 :: 		imgDst++;
	R2 <4> <-  R2 + 2   (midx: 2)
	R2 <4> <- R2   (midx: 0)
//OLED_driver.c,584 :: 		imgSrc++;
   (midx: 0)
	R3 <4> <-  R5 + 1   (midx: 2)
   (midx: 0)
	R4 <4> <- R3   (midx: 0)
//OLED_driver.c,578 :: 		for (var = 0; var < imgSize; var++)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
//OLED_driver.c,585 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	goto	66   (midx: 0)
67:   (midx: 0)
  end
   (midx: 0)
_OLED_GetImageDimensions:
  begin   (midx: 0)
//OLED_driver.c,592 :: 		void OLED_GetImageDimensions(uint8_t *width, uint8_t *height, const uint8_t* image)
_OLED_GetImageDimensions:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R1 <4> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <4> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,594 :: 		*height = image[2] + (image[3] << 8);
	R3 <4> <-  R2 + 2   (midx: 2)
	R4 <1> <- *R3   (midx: 0)
	R3 <4> <-  R2 + 3   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <2> <-  R3 shl 8   (midx: 1)
	R3 <2> <-  R4 + R3   (midx: 1)
   (midx: 0)
	[R1] <1> <- R3   (midx: 0)
//OLED_driver.c,595 :: 		*width  = image[4] + (image[5] << 8);
	R3 <4> <-  R2 + 4   (midx: 2)
	R4 <1> <- *R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R2 + 5   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <2> <-  R3 shl 8   (midx: 1)
	R3 <2> <-  R4 + R3   (midx: 1)
   (midx: 0)
	[R0] <1> <- R3   (midx: 0)
  end
   (midx: 0)
_OLED_DrawImage:
  begin   (midx: 0)
//OLED_driver.c,602 :: 		oled_status_t OLED_DrawImage (const uint8_t* image, uint8_t xCrd, uint8_t yCrd)
_OLED_DrawImage:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R10 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R11 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,604 :: 		oled_status_t status = OLED_STATUS_SUCCESS;
   (midx: 0)
//OLED_driver.c,608 :: 		ptr = image;
   (midx: 0)
	R1 <4> <- R0   (midx: 0)
//OLED_driver.c,610 :: 		ptr += 2;
   (midx: 0)
	R4 <4> <-  R1 + 2   (midx: 2)
//OLED_driver.c,611 :: 		height = *ptr;
	R3 <1> <- *R4   (midx: 0)
   (midx: 0)
	R1 <2> <- R3   (midx: 0)
//OLED_driver.c,612 :: 		ptr++;
	R4 <4> <-  R4 + 1   (midx: 2)
//OLED_driver.c,613 :: 		height += (*ptr) << 8;
	R3 <1> <- *R4   (midx: 0)
	R3 <2> <-  R3 shl 8   (midx: 1)
   (midx: 0)
	R3 <2> <-  R1 + R3   (midx: 1)
   (midx: 0)
	R12 <2> <- R3   (midx: 0)
//OLED_driver.c,615 :: 		ptr++;
	R4 <4> <-  R4 + 1   (midx: 2)
//OLED_driver.c,616 :: 		width = *ptr;
	R1 <2> <- *R4   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
//OLED_driver.c,617 :: 		ptr++;
	R3 <4> <-  R4 + 1   (midx: 2)
//OLED_driver.c,618 :: 		width += (*ptr)<<8;
	R3 <1> <- *R3   (midx: 0)
	R3 <2> <-  R3 shl 8   (midx: 1)
	R3 <2> <-  R1 + R3   (midx: 1)
	R1 <2> <- R3   (midx: 0)
//OLED_driver.c,621 :: 		if AreCoordsNotValid( xCrd, yCrd, width, height )
	R3 <2> <-  R10 + R3   (midx: 1)
	R3 <2> <-  R3 - 1   (midx: 1)
	if ( R3 > 96) then goto 70   (midx: 1)
	if ( R10 < 0) then goto 70   (midx: 0)
	R3 <2> <-  R11 + R12   (midx: 1)
	R3 <2> <-  R3 - 1   (midx: 1)
	if ( R3 > 96) then goto 70   (midx: 1)
	if ( R11 < 0) then goto 70   (midx: 0)
	R3 <1> <- 0   (midx: 0)
	goto	69   (midx: 0)
70:   (midx: 0)
	R3 <1> <- 1   (midx: 0)
69:   (midx: 0)
tmi: LogicalEnd   (midx: 0)
   (midx: 0)
	if ( R3 = 0) then goto 71   (midx: 0)
//OLED_driver.c,624 :: 		}
	goto	72   (midx: 0)
71:   (midx: 0)
//OLED_driver.c,628 :: 		OLED_Swap( screenBuf, (const uint8_t*)( image ) + 6 , width * height );
   (midx: 0)
	R4 <2> <-  R1 * R12   (midx: 1)
   (midx: 0)
	R3 <4> <-  R0 + 6   (midx: 2)
	R1 <2> <- PUSH(R1)   (midx: 255)
	R2 <2> <- R4   (midx: 0)
	R1 <4> <- R3   (midx: 0)
	R0 <4> <- #OLED_driver_screenBuf   (midx: 0)
	CALL OLED_driver_OLED_Swap   (midx: 0)
	R1 <2> <- POP   (midx: 255)
//OLED_driver.c,632 :: 		}
72:   (midx: 0)
//OLED_driver.c,635 :: 		SetBorders( xCrd, yCrd, width, height );
	R1 <2> <- PUSH(R1)   (midx: 255)
	R3 <1> <- R12   (midx: 0)
	R2 <1> <- R1   (midx: 0)
   (midx: 0)
	R1 <1> <- R11   (midx: 0)
   (midx: 0)
	R0 <1> <- R10   (midx: 0)
	CALL OLED_driver_SetBorders   (midx: 0)
	R1 <2> <- POP   (midx: 255)
//OLED_driver.c,638 :: 		if ( OLED_STATUS_SUCCESS != OLED_SendData( (const uint8_t*)screenBuf, width * height * OLED_BYTES_PER_PIXEL ) )
   (midx: 0)
   (midx: 0)
	R3 <2> <-  R1 * R12   (midx: 1)
	R3 <2> <-  R3 shl 1   (midx: 1)
	R1 <4> <- R3   (midx: 0)
	R0 <4> <- #OLED_driver_screenBuf   (midx: 0)
	CALL _OLED_SendData   (midx: 0)
	if ( R0 = 0) then goto 73   (midx: 0)
//OLED_driver.c,640 :: 		return OLED_STATUS_PROTOCOL_ERROR;
	R0 <1> <- 2   (midx: 0)
	return   (midx: 0)
//OLED_driver.c,641 :: 		}
73:   (midx: 0)
//OLED_driver.c,643 :: 		return OLED_STATUS_SUCCESS;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_OLED_SetFont:
  begin   (midx: 0)
//OLED_driver.c,650 :: 		void OLED_SetFont(const uint8_t *activeFont, uint16_t font_color, uint8_t font_orientation)
_OLED_SetFont:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,652 :: 		_font = activeFont;
	R3 <4> <- addr(OLED_driver__font)   (midx: 0)
	[R3] <4> <- R0   (midx: 0)
//OLED_driver.c,653 :: 		_fontFirstChar = activeFont[2] + (activeFont[3] << 8);
	R3 <4> <-  R0 + 2   (midx: 2)
	R4 <1> <- *R3   (midx: 0)
	R3 <4> <-  R0 + 3   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <2> <-  R3 shl 8   (midx: 1)
	R4 <2> <-  R4 + R3   (midx: 1)
	R3 <4> <- addr(OLED_driver__fontFirstChar)   (midx: 0)
	[R3] <2> <- R4   (midx: 0)
//OLED_driver.c,654 :: 		_fontLastChar = activeFont[4] + (activeFont[5] << 8);
	R3 <4> <-  R0 + 4   (midx: 2)
	R4 <1> <- *R3   (midx: 0)
	R3 <4> <-  R0 + 5   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <2> <-  R3 shl 8   (midx: 1)
	R4 <2> <-  R4 + R3   (midx: 1)
	R3 <4> <- addr(OLED_driver__fontLastChar)   (midx: 0)
	[R3] <2> <- R4   (midx: 0)
//OLED_driver.c,655 :: 		_fontHeight = activeFont[6];
   (midx: 0)
	R3 <4> <-  R0 + 6   (midx: 2)
	R4 <1> <- *R3   (midx: 0)
	R3 <4> <- addr(OLED_driver__fontHeight)   (midx: 0)
	[R3] <2> <- R4   (midx: 0)
//OLED_driver.c,657 :: 		FontColor = font_color;
	R3 <4> <- addr(OLED_driver_FontColor)   (midx: 0)
   (midx: 0)
	[R3] <2> <- R1   (midx: 0)
//OLED_driver.c,658 :: 		FontOrientation = font_orientation;
	R3 <4> <- addr(OLED_driver_FontOrientation)   (midx: 0)
   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//OLED_driver.c,659 :: 		FontInitialized = 1;
	R4 <1> <- 1   (midx: 0)
	R3 <4> <- addr(OLED_driver_FontInitialized)   (midx: 0)
	[R3] <1> <- R4   (midx: 0)
//OLED_driver.c,660 :: 		ExternalFontSet = 0;
	R4 <1> <- 0   (midx: 0)
	R3 <4> <- addr(_ExternalFontSet)   (midx: 0)
	[R3] <1> <- R4   (midx: 0)
  end
   (midx: 0)
OLED_driver_OLED_MoveCursor:
  begin   (midx: 0)
//OLED_driver.c,686 :: 		static void OLED_MoveCursor(uint16_t _x, uint16_t _y)
OLED_driver_OLED_MoveCursor:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,688 :: 		x_cord = _x;
	R2 <4> <- addr(OLED_driver_x_cord)   (midx: 0)
   (midx: 0)
	[R2] <2> <- R0   (midx: 0)
//OLED_driver.c,689 :: 		y_cord = _y;
	R2 <4> <- addr(OLED_driver_y_cord)   (midx: 0)
   (midx: 0)
	[R2] <2> <- R1   (midx: 0)
  end
   (midx: 0)
OLED_driver_OLED_WriteChar:
  begin   (midx: 0)
//OLED_driver.c,696 :: 		static void OLED_WriteChar(uint16_t ch)
OLED_driver_OLED_WriteChar:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R5 <2> <- R0   (midx: 0)
   (midx: 0)
//OLED_driver.c,698 :: 		uint8_t chWidth = 0;
   (midx: 0)
//OLED_driver.c,700 :: 		uint16_t x = 0, y;
   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	OLED_driver_OLED_WriteChar_x_L0 <-initialize(0)   (midx: 0)
//OLED_driver.c,701 :: 		uint8_t temp = 0, mask;
   (midx: 0)
	OLED_driver_OLED_WriteChar_temp_L0 <-initialize(0)   (midx: 0)
//OLED_driver.c,707 :: 		if(FontInitialized == 0)
	R1 <4> <- addr(OLED_driver_FontInitialized)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
	if ( R1 != 0) then goto 78   (midx: 0)
//OLED_driver.c,709 :: 		OLED_SetFont(guiFont_Tahoma_8_Regular, OLED_COLOR_BLACK, FO_HORIZONTAL); //default font
	R1 <4> <- addr(0)   (midx: 0)
	R2 <1> <- 0   (midx: 0)
	R0 <4> <- R1   (midx: 0)
	R1 <2> <- 0   (midx: 0)
	CALL _OLED_SetFont   (midx: 0)
//OLED_driver.c,710 :: 		FontInitialized = 1;
	R2 <1> <- 1   (midx: 0)
	R1 <4> <- addr(OLED_driver_FontInitialized)   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
//OLED_driver.c,711 :: 		}
78:   (midx: 0)
//OLED_driver.c,713 :: 		if (ch < _fontFirstChar)
	R1 <4> <- addr(OLED_driver__fontFirstChar)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
   (midx: 0)
	if ( R5 >= R1) then goto 79   (midx: 1)
//OLED_driver.c,715 :: 		return;
	return   (midx: 0)
//OLED_driver.c,716 :: 		}
79:   (midx: 0)
//OLED_driver.c,717 :: 		if (ch > _fontLastChar)
   (midx: 0)
	R1 <4> <- addr(OLED_driver__fontLastChar)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
   (midx: 0)
	if ( R5 <= R1) then goto 80   (midx: 1)
//OLED_driver.c,719 :: 		return;
	return   (midx: 0)
//OLED_driver.c,720 :: 		}
80:   (midx: 0)
//OLED_driver.c,723 :: 		tmp = (ch - _fontFirstChar) << 2;
   (midx: 0)
	R1 <4> <- addr(OLED_driver__fontFirstChar)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
   (midx: 0)
	R1 <2> <-  R5 - R1   (midx: 1)
	R2 <2> <-  R1 shl 2   (midx: 1)
//OLED_driver.c,724 :: 		pChTable = _font + 8 + tmp;
	R4 <4> <- addr(OLED_driver__font)   (midx: 0)
	R1 <4> <- [R4]   (midx: 0)
	R1 <4> <-  R1 + 8   (midx: 2)
	R3 <4> <-  R1 + R2   (midx: 2)
//OLED_driver.c,725 :: 		chWidth = *pChTable;
	R12 <1> <- *R3   (midx: 0)
   (midx: 0)
	R12 <1> <- R12   (midx: 0)
//OLED_driver.c,727 :: 		offset = (uint32_t) pChTable[1] + ((uint32_t)pChTable[2] << 8) + ((uint32_t)pChTable[3] << 16);
	R1 <4> <-  R3 + 1   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R2 <4> <- R1   (midx: 0)
	R1 <4> <-  R3 + 2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <-  R1 shl 8   (midx: 2)
	R2 <4> <-  R2 + R1   (midx: 2)
	R1 <4> <-  R3 + 3   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <-  R1 shl 16   (midx: 2)
	R2 <4> <-  R2 + R1   (midx: 2)
//OLED_driver.c,729 :: 		pChBitMap = _font + offset;
	R1 <4> <- R4   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	OLED_driver_OLED_WriteChar_pChBitMap_L0 <4> <- R1   (midx: 0)
//OLED_driver.c,731 :: 		if ((FontOrientation == FO_HORIZONTAL) || (FontOrientation == FO_VERTICAL_COLUMN))
	R1 <4> <- addr(OLED_driver_FontOrientation)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
	if ( R1 = 0) then goto 105   (midx: 0)
	R1 <4> <- addr(OLED_driver_FontOrientation)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
	if ( R1 = 2) then goto 104   (midx: 0)
	goto	83   (midx: 0)
105:   (midx: 0)
104:   (midx: 0)
//OLED_driver.c,733 :: 		y = y_cord;
	R1 <4> <- addr(OLED_driver_y_cord)   (midx: 0)
   (midx: 0)
	R2 <2> <- [R1]   (midx: 0)
//OLED_driver.c,734 :: 		for (yCnt = 0; yCnt < _fontHeight; yCnt++)
	R1 <1> <- 0   (midx: 0)
   (midx: 0)
   (midx: 0)
	OLED_driver_OLED_WriteChar_yCnt_L0 <1> <- R1   (midx: 0)
	R3 <1> <- R12   (midx: 0)
	R0 <2> <- R2   (midx: 0)
84:   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- addr(OLED_driver__fontHeight)   (midx: 0)
	R2 <2> <- [R1]   (midx: 0)
	R1 <1> <- OLED_driver_OLED_WriteChar_yCnt_L0   (midx: 0)
	if ( R1 >= R2) then goto 85   (midx: 1)
//OLED_driver.c,736 :: 		x = x_cord;
	R1 <4> <- addr(OLED_driver_x_cord)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	OLED_driver_OLED_WriteChar_x_L0 <2> <- R1   (midx: 0)
//OLED_driver.c,737 :: 		mask = 0;
   (midx: 0)
	R6 <1> <- 0   (midx: 0)
//OLED_driver.c,738 :: 		for (xCnt = 0; xCnt < chWidth; xCnt++)
	R1 <1> <- 0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	OLED_driver_OLED_WriteChar_xCnt_L0 <1> <- R1   (midx: 0)
	R2 <2> <- R0   (midx: 0)
	R12 <1> <- R3   (midx: 0)
	R6 <1> <- R6   (midx: 0)
87:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- OLED_driver_OLED_WriteChar_xCnt_L0   (midx: 0)
	if ( R1 >= R12) then goto 88   (midx: 0)
//OLED_driver.c,740 :: 		if (mask == 0)
   (midx: 0)
	if ( R6 != 0) then goto 106   (midx: 0)
//OLED_driver.c,742 :: 		temp = *pChBitMap++;
	R1 <4> <- OLED_driver_OLED_WriteChar_pChBitMap_L0   (midx: 0)
	R1 <1> <- *R1   (midx: 0)
	OLED_driver_OLED_WriteChar_temp_L0 <1> <- R1   (midx: 0)
	R1 <4> <- OLED_driver_OLED_WriteChar_pChBitMap_L0   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	OLED_driver_OLED_WriteChar_pChBitMap_L0 <4> <- R1   (midx: 0)
//OLED_driver.c,743 :: 		mask = 0x01;
   (midx: 0)
   (midx: 0)
	R6 <1> <- 1   (midx: 0)
	R0 <1> <- R6   (midx: 0)
//OLED_driver.c,744 :: 		}
	goto	90   (midx: 0)
106:   (midx: 0)
//OLED_driver.c,740 :: 		if (mask == 0)
	R0 <1> <- R6   (midx: 0)
//OLED_driver.c,744 :: 		}
90:   (midx: 0)
//OLED_driver.c,746 :: 		if (temp & mask)
   (midx: 0)
	R1 <1> <- OLED_driver_OLED_WriteChar_temp_L0   (midx: 0)
	R1 <1> <-  R1 & R0   (midx: 0)
	if (!R1) then goto 91   (midx: 0)
//OLED_driver.c,748 :: 		OLED_DrawPixel(x, y, FontColor);
	R1 <4> <- addr(OLED_driver_FontColor)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <2> <- PUSH(R2)   (midx: 255)
	R2 <2> <- PUSH(R2)   (midx: 255)
	R0 <2> <- OLED_driver_OLED_WriteChar_x_L0   (midx: 0)
	R2 <2> <- R1   (midx: 0)
	R1 <2> <- POP   (midx: 255)
	CALL _OLED_DrawPixel   (midx: 0)
	R2 <2> <- POP   (midx: 255)
	R0 <1> <- POP   (midx: 255)
//OLED_driver.c,749 :: 		}
91:   (midx: 0)
//OLED_driver.c,751 :: 		x++;
	R1 <2> <- OLED_driver_OLED_WriteChar_x_L0   (midx: 0)
	R1 <2> <-  R1 + 1   (midx: 1)
	OLED_driver_OLED_WriteChar_x_L0 <2> <- R1   (midx: 0)
//OLED_driver.c,752 :: 		mask <<= 1;
   (midx: 0)
	R1 <2> <-  R0 shl 1   (midx: 1)
   (midx: 0)
	R6 <1> <- R1   (midx: 0)
//OLED_driver.c,738 :: 		for (xCnt = 0; xCnt < chWidth; xCnt++)
	R1 <1> <- OLED_driver_OLED_WriteChar_xCnt_L0   (midx: 0)
	R1 <1> <-  R1 + 1   (midx: 0)
	OLED_driver_OLED_WriteChar_xCnt_L0 <1> <- R1   (midx: 0)
//OLED_driver.c,753 :: 		}
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R12 <1> <- R12   (midx: 0)
	R6 <1> <- R6   (midx: 0)
	goto	87   (midx: 0)
88:   (midx: 0)
//OLED_driver.c,754 :: 		y++;
	R2 <2> <-  R2 + 1   (midx: 1)
	R2 <2> <- R2   (midx: 0)
//OLED_driver.c,734 :: 		for (yCnt = 0; yCnt < _fontHeight; yCnt++)
	R1 <1> <- OLED_driver_OLED_WriteChar_yCnt_L0   (midx: 0)
	R1 <1> <-  R1 + 1   (midx: 0)
	OLED_driver_OLED_WriteChar_yCnt_L0 <1> <- R1   (midx: 0)
//OLED_driver.c,755 :: 		}
   (midx: 0)
   (midx: 0)
	R3 <1> <- R12   (midx: 0)
	R0 <2> <- R2   (midx: 0)
	goto	84   (midx: 0)
85:   (midx: 0)
//OLED_driver.c,758 :: 		if (FontOrientation == FO_HORIZONTAL)
   (midx: 0)
	R1 <4> <- addr(OLED_driver_FontOrientation)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
   (midx: 0)
	if ( R1 != 0) then goto 92   (midx: 0)
//OLED_driver.c,760 :: 		x_cord = x + 1;
	R1 <2> <- OLED_driver_OLED_WriteChar_x_L0   (midx: 0)
	R2 <2> <-  R1 + 1   (midx: 1)
	R1 <4> <- addr(OLED_driver_x_cord)   (midx: 0)
	[R1] <2> <- R2   (midx: 0)
//OLED_driver.c,761 :: 		}
	goto	93   (midx: 0)
92:   (midx: 0)
//OLED_driver.c,764 :: 		y_cord = y; // visini nego sirini, nema potrebe da se dodaje jedan pixel kao
   (midx: 0)
	R1 <4> <- addr(OLED_driver_y_cord)   (midx: 0)
   (midx: 0)
	[R1] <2> <- R0   (midx: 0)
//OLED_driver.c,765 :: 		}
93:   (midx: 0)
//OLED_driver.c,766 :: 		}
	goto	94   (midx: 0)
83:   (midx: 0)
//OLED_driver.c,769 :: 		y = x_cord;
   (midx: 0)
	R1 <4> <- addr(OLED_driver_x_cord)   (midx: 0)
   (midx: 0)
	R3 <2> <- [R1]   (midx: 0)
//OLED_driver.c,770 :: 		for (yCnt = 0; yCnt < _fontHeight; yCnt++)
	R1 <1> <- 0   (midx: 0)
   (midx: 0)
   (midx: 0)
	OLED_driver_OLED_WriteChar_yCnt_L0 <1> <- R1   (midx: 0)
	R0 <2> <- R3   (midx: 0)
	R3 <1> <- R12   (midx: 0)
95:   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- addr(OLED_driver__fontHeight)   (midx: 0)
	R2 <2> <- [R1]   (midx: 0)
	R1 <1> <- OLED_driver_OLED_WriteChar_yCnt_L0   (midx: 0)
	if ( R1 >= R2) then goto 96   (midx: 1)
//OLED_driver.c,772 :: 		x = y_cord;
	R1 <4> <- addr(OLED_driver_y_cord)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	OLED_driver_OLED_WriteChar_x_L0 <2> <- R1   (midx: 0)
//OLED_driver.c,773 :: 		mask = 0;
   (midx: 0)
	R6 <1> <- 0   (midx: 0)
//OLED_driver.c,774 :: 		for (xCnt = 0; xCnt < chWidth; xCnt++)
	R1 <1> <- 0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	OLED_driver_OLED_WriteChar_xCnt_L0 <1> <- R1   (midx: 0)
	R2 <2> <- R0   (midx: 0)
	R12 <1> <- R3   (midx: 0)
	R6 <1> <- R6   (midx: 0)
98:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- OLED_driver_OLED_WriteChar_xCnt_L0   (midx: 0)
	if ( R1 >= R12) then goto 99   (midx: 0)
//OLED_driver.c,776 :: 		if (mask == 0)
   (midx: 0)
	if ( R6 != 0) then goto 107   (midx: 0)
//OLED_driver.c,778 :: 		temp = *pChBitMap++;
	R1 <4> <- OLED_driver_OLED_WriteChar_pChBitMap_L0   (midx: 0)
	R1 <1> <- *R1   (midx: 0)
	OLED_driver_OLED_WriteChar_temp_L0 <1> <- R1   (midx: 0)
	R1 <4> <- OLED_driver_OLED_WriteChar_pChBitMap_L0   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	OLED_driver_OLED_WriteChar_pChBitMap_L0 <4> <- R1   (midx: 0)
//OLED_driver.c,779 :: 		mask = 0x01;
   (midx: 0)
   (midx: 0)
	R6 <1> <- 1   (midx: 0)
	R0 <1> <- R6   (midx: 0)
//OLED_driver.c,780 :: 		}
	goto	101   (midx: 0)
107:   (midx: 0)
//OLED_driver.c,776 :: 		if (mask == 0)
	R0 <1> <- R6   (midx: 0)
//OLED_driver.c,780 :: 		}
101:   (midx: 0)
//OLED_driver.c,782 :: 		if (temp & mask)
   (midx: 0)
	R1 <1> <- OLED_driver_OLED_WriteChar_temp_L0   (midx: 0)
	R1 <1> <-  R1 & R0   (midx: 0)
	if (!R1) then goto 102   (midx: 0)
//OLED_driver.c,784 :: 		OLED_DrawPixel(y, x, FontColor);
	R1 <4> <- addr(OLED_driver_FontColor)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <2> <- PUSH(R2)   (midx: 255)
	R0 <2> <- R2   (midx: 0)
	R2 <2> <- R1   (midx: 0)
	R1 <2> <- OLED_driver_OLED_WriteChar_x_L0   (midx: 0)
	CALL _OLED_DrawPixel   (midx: 0)
	R2 <2> <- POP   (midx: 255)
	R0 <1> <- POP   (midx: 255)
//OLED_driver.c,785 :: 		}
102:   (midx: 0)
//OLED_driver.c,787 :: 		x--;
	R1 <2> <- OLED_driver_OLED_WriteChar_x_L0   (midx: 0)
	R1 <2> <-  R1 - 1   (midx: 1)
	OLED_driver_OLED_WriteChar_x_L0 <2> <- R1   (midx: 0)
//OLED_driver.c,788 :: 		mask <<= 1;
   (midx: 0)
	R1 <2> <-  R0 shl 1   (midx: 1)
   (midx: 0)
	R6 <1> <- R1   (midx: 0)
//OLED_driver.c,774 :: 		for (xCnt = 0; xCnt < chWidth; xCnt++)
	R1 <1> <- OLED_driver_OLED_WriteChar_xCnt_L0   (midx: 0)
	R1 <1> <-  R1 + 1   (midx: 0)
	OLED_driver_OLED_WriteChar_xCnt_L0 <1> <- R1   (midx: 0)
//OLED_driver.c,789 :: 		}
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R12 <1> <- R12   (midx: 0)
	R6 <1> <- R6   (midx: 0)
	goto	98   (midx: 0)
99:   (midx: 0)
//OLED_driver.c,791 :: 		y++;
   (midx: 0)
	R1 <2> <-  R2 + 1   (midx: 1)
   (midx: 0)
	R3 <2> <- R1   (midx: 0)
//OLED_driver.c,770 :: 		for (yCnt = 0; yCnt < _fontHeight; yCnt++)
	R1 <1> <- OLED_driver_OLED_WriteChar_yCnt_L0   (midx: 0)
	R1 <1> <-  R1 + 1   (midx: 0)
	OLED_driver_OLED_WriteChar_yCnt_L0 <1> <- R1   (midx: 0)
//OLED_driver.c,792 :: 		}
   (midx: 0)
   (midx: 0)
	R0 <2> <- R3   (midx: 0)
	R3 <1> <- R12   (midx: 0)
	goto	95   (midx: 0)
96:   (midx: 0)
//OLED_driver.c,795 :: 		y_cord = x - 1;
	R1 <2> <- OLED_driver_OLED_WriteChar_x_L0   (midx: 0)
	R2 <2> <-  R1 - 1   (midx: 1)
	R1 <4> <- addr(OLED_driver_y_cord)   (midx: 0)
	[R1] <2> <- R2   (midx: 0)
//OLED_driver.c,796 :: 		}
94:   (midx: 0)
  end
   (midx: 0)
_OLED_WriteText:
  begin   (midx: 0)
//OLED_driver.c,668 :: 		void OLED_WriteText(uint8_t *text, uint16_t x, uint16_t y) {
_OLED_WriteText:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_OLED_WriteText_text <4> <- R0   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
//OLED_driver.c,671 :: 		if (x >= OLED_SCREEN_WIDTH)
   (midx: 0)
   (midx: 0)
	if ( R1 < 96) then goto 74   (midx: 1)
//OLED_driver.c,672 :: 		return;
	return   (midx: 0)
74:   (midx: 0)
//OLED_driver.c,673 :: 		if (y >= OLED_SCREEN_HEIGHT)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R2 < 96) then goto 75   (midx: 1)
//OLED_driver.c,674 :: 		return;
	return   (midx: 0)
75:   (midx: 0)
//OLED_driver.c,676 :: 		i = 0;
   (midx: 0)
   (midx: 0)
	R3 <2> <- 0   (midx: 0)
	OLED_WriteText_i_L0 <2> <- R3   (midx: 0)
//OLED_driver.c,677 :: 		OLED_MoveCursor(x, y);
   (midx: 0)
	R0 <2> <- R1   (midx: 0)
   (midx: 0)
	R1 <2> <- R2   (midx: 0)
	CALL OLED_driver_OLED_MoveCursor   (midx: 0)
//OLED_driver.c,678 :: 		while (text[i])
76:   (midx: 0)
	R4 <4> <- OLED_WriteText_i_L0   (midx: 0)
	R3 <4> <- FARG_OLED_WriteText_text   (midx: 0)
	R3 <4> <-  R3 + R4   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	if (!R3) then goto 77   (midx: 0)
//OLED_driver.c,679 :: 		OLED_WriteChar(text[i++]);
	R4 <4> <- OLED_WriteText_i_L0   (midx: 0)
	R3 <4> <- FARG_OLED_WriteText_text   (midx: 0)
	R3 <4> <-  R3 + R4   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	R0 <2> <- R3   (midx: 0)
	CALL OLED_driver_OLED_WriteChar   (midx: 0)
	R3 <2> <- OLED_WriteText_i_L0   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	OLED_WriteText_i_L0 <2> <- R3   (midx: 0)
	goto	76   (midx: 0)
77:   (midx: 0)
  end
   (midx: 0)
_OLED_SetTextProperties:
  begin   (midx: 0)
//OLED_driver.c,799 :: 		void OLED_SetTextProperties(oled_text_properties_t *textProperties)
_OLED_SetTextProperties:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
//OLED_driver.c,801 :: 		oled_text_properties.font       = textProperties->font;
	R1 <4> <- *R0   (midx: 0)
	R4 <4> <- addr(OLED_driver_oled_text_properties+0)   (midx: 0)
	[R4] <4> <- R1   (midx: 0)
//OLED_driver.c,802 :: 		oled_text_properties.fontColor  = textProperties->fontColor;
	R1 <4> <-  R0 + 4   (midx: 2)
	R1 <2> <- *R1   (midx: 0)
	R3 <4> <- addr(OLED_driver_oled_text_properties+4)   (midx: 0)
	[R3] <2> <- R1   (midx: 0)
//OLED_driver.c,803 :: 		oled_text_properties.alignParam = textProperties->alignParam;
	R1 <4> <-  R0 + 6   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <4> <- addr(OLED_driver_oled_text_properties+6)   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
//OLED_driver.c,804 :: 		oled_text_properties.background = textProperties->background;
   (midx: 0)
	R1 <4> <-  R0 + 8   (midx: 2)
	R2 <4> <- *R1   (midx: 0)
	R1 <4> <- addr(OLED_driver_oled_text_properties+8)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//OLED_driver.c,806 :: 		OLED_SetFont( oled_text_properties.font, oled_text_properties.fontColor, 0 );
	R1 <4> <- R3   (midx: 0)
	R2 <2> <- [R1]   (midx: 0)
	R1 <4> <- R4   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R0 <4> <- R1   (midx: 0)
	R1 <2> <- R2   (midx: 0)
	R2 <1> <- 0   (midx: 0)
	CALL _OLED_SetFont   (midx: 0)
  end
   (midx: 0)
